image:
  name: registry.gitlab.com/famedly/containers/flutter-dockerimages:stable

variables:
  GIT_SUBMODULE_STRATEGY: recursive

.shared_windows_runners:
  tags:
  - shared-windows
  - windows
  - windows-1809

stages:
- coverage
- publish
- release

code_analyze:
  stage: coverage
  dependencies: []
  script:
    - flutter format lib/ test/ test_driver/ --set-exit-if-changed
    - flutter analyze

test:
  stage: coverage
  dependencies: []
  script:
    - flutter test

build_web:
  stage: coverage
  image: registry.gitlab.com/famedly/containers/flutter-dockerimages:beta
  script:
    - sudo apt update
    - sudo apt install curl -y
    - rm -r assets/js/package
    - cd assets/js/ && curl -L 'https://gitlab.com/famedly/libraries/olm/-/jobs/artifacts/master/download?job=build_js' > olm.zip && cd ../../
    - cd assets/js/ && unzip olm.zip && cd ../../
    - cd assets/js/ && rm olm.zip && cd ../../
    - cd assets/js/ && mv javascript package && cd ../../
    - cd web/ && rm sql-wasm.js sql-wasm.wasm && cd ../
    - cd web/ && curl -L 'https://github.com/sql-js/sql.js/releases/latest/download/sqljs-wasm.zip' > sqljs-wasm.zip && cd ../
    - cd web/ && unzip sqljs-wasm.zip && cd ../
    - cd web/ && rm sqljs-wasm.zip && cd ../
    - flutter clean
    - flutter pub get
    - flutter build web --release --verbose
    # upload elsewhere, if wanted
  artifacts:
    paths:
      - build/web/

build_windows:
  extends:
    - .shared_windows_runners
  stage: coverage
  script:
    # Install chocolately
    - Set-ExecutionPolicy Bypass -Scope Process
    - Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    - choco install git -y
    - choco install visualstudio2019community -y --package-parameters "--add Microsoft.VisualStudio.Product.BuildTools --includeRecommended --includeOptional --passive --locale en-US"
    - cd ..; git clone https://github.com/flutter/flutter.git -b dev; $env:path += ";C:\GitLab-Runner\builds\ChristianPauly\flutter\bin"; cd fluffychat-flutter
    - flutter doctor
    - flutter config --enable-windows-desktop
    - flutter build windows
  needs: []
  artifacts:
    paths:
      - build/windows/runner/Release/
    name: "Binaries"
  allow_failure: true

build_android_debug:
  stage: coverage
  script:
    - truncate -s $(head -n -2 android/app/build.gradle | wc -c) android/app/build.gradle
    - flutter build apk --debug -v
  artifacts:
    when: on_success
    paths:
      - build/app/outputs/apk/debug/app-debug.apk
  except:
    - main


build_android_apk:
  stage: coverage
  script:
    - cd android && echo $FDROID_KEY | base64 --decode --ignore-garbage > key.jks && cd ..
    - cd android && echo "storePassword=${FDROID_KEY_PASS}" >> key.properties && cd ..
    - cd android && echo "keyPassword=${FDROID_KEY_PASS}" >> key.properties && cd ..
    - cd android && echo "keyAlias=key" >> key.properties && cd ..
    - cd android && echo "storeFile=../key.jks" >> key.properties && cd ..
    - cd android/app && echo $GOOGLE_SERVICES >> google-services.json && cd ../..
    - flutter pub get
    - flutter build apk --release
    - mkdir -p build/android
    - cp build/app/outputs/apk/release/app-release.apk build/android/
  artifacts:
    when: on_success
    paths:
      - build/android/app-release.apk
  only:
    - main
    - tags


build_android_appbundle:
  stage: coverage
  script:
    - cd android && echo $FDROID_KEY | base64 --decode --ignore-garbage > key.jks && cd ..
    - cd android && echo "storePassword=${FDROID_KEY_PASS}" >> key.properties && cd ..
    - cd android && echo "keyPassword=${FDROID_KEY_PASS}" >> key.properties && cd ..
    - cd android && echo "keyAlias=key" >> key.properties && cd ..
    - cd android && echo "storeFile=../key.jks" >> key.properties && cd ..
    - cd android/app && echo $GOOGLE_SERVICES >> google-services.json && cd ../..
    - flutter build appbundle --target-platform android-arm,android-arm64,android-x64
    - mkdir -p build/android
    - cp build/app/outputs/bundle/release/app-release.aab build/android/
  artifacts:
    when: on_success
    paths:
      - build/android/app-release.aab
  only:
    - main


upload_to_fdroid_repo:
  stage: publish
  before_script:
    ##
    ## Install ssh-agent if not already installed.
    ##
    - 'which ssh-agent || (sudo apt-get update -y && sudo apt-get install openssh-client -y )'
    ##
    ## Install rsync if not already installed.
    ##
    - 'which rsync || (sudo apt-get update -y && sudo apt-get install rsync -y )'
    ##
    ## Install pcregrep if not already installed.
    ##
    - 'which pcregrep || (sudo apt-get update -y && sudo apt-get install pcregrep -y )'
    ##
    ## Run ssh-agent (inside the build environment)
    ##
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa fdroid.nordgedanken.dev >> ~/.ssh/known_hosts
  script:
    - cd build/android/
    - export UPDATE_VERSION=$(pcregrep -o1 'version:\\s([0-9]*\\.[0-9]*\\.[0-9]*)\\+[0-9]*' ../../pubspec.yaml) && mv app-release.apk "${UPDATE_VERSION}.apk"
    - rsync -rav -e ssh ./ fluffy@fdroid.nordgedanken.dev:/fdroid/repo
    - ssh fluffy@fdroid.nordgedanken.dev "cd fdroid && fdroid update"
  needs: ["build_android_apk"]
  only:
    - tags

pages:
  stage: publish
  image: ruby:2.3
  script:
    - rm assets -r
    - cp _config.yml ./build/web/
    - cp Gemfile ./build/web/
    - cp Gemfile.lock ./build/web/
    - cd build/web/ && bundle install && cd ../../
    - cd build/web/ && bundle exec jekyll build -d public && cd ../../
    - mv build/web/public ./
  needs: ["build_web"]
  artifacts:
    paths:
      - public
  only:
    - main

build_linux:
  stage: coverage
  image: registry.gitlab.com/famedly/containers/flutter-dockerimages:dev
  dependencies: []
  script:
    - sudo apt update
    - sudo apt install clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev
    - flutter config --enable-linux-desktop
    - flutter pub get
    - flutter build linux --release -v
  artifacts:
    when: on_success
    paths:
      - build/linux/release/bundle/
  allow_failure: true

snap:edge:
  stage: publish
  image: "cibuilds/snapcraft:core18"
  only:
    - main
  script:
    ## Manually install the flutter-dev snap, so we can use the flutter extension
    - 'curl -L $(curl -H "X-Ubuntu-Series: 16" "https://api.snapcraft.io/api/v1/snaps/details/flutter?channel=latest/stable" | jq ".download_url" -r) --output flutter.snap'
    - sudo mkdir -p /snap/flutter
    - sudo unsquashfs -d /snap/flutter/current flutter.snap
    - rm -f flutter.snap
    - sudo ln -sf /snap/flutter/current/flutter.sh /snap/bin/flutter
    - sudo ln -sf /snap/flutter/current/env.sh /snap/bin/env.sh
    - snapcraft
    - echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > snapcraft.login
    - snapcraft login --with snapcraft.login
    - snapcraft push --release=edge *.snap
    - snapcraft logout
  artifacts:
    paths:
      - './*.snap'
    when: on_success
  allow_failure: true
  
snap:publish:
  stage: publish
  image: "cibuilds/snapcraft:core18"
  only:
    - tags
  script:
    - snapcraft
    - echo $SNAPCRAFT_LOGIN_FILE | base64 --decode --ignore-garbage > snapcraft.login
    - snapcraft login --with snapcraft.login
    - snapcraft push --release=stable *.snap
    - snapcraft logout
  artifacts:
    paths:
      - './*.snap'
    when: on_success
    expire_in: 1 week
  needs: []
  allow_failure: true

update-dependencies:
  stage: coverage
  needs: []
  tags:
    - docker
  only:
    - schedules
  variables:
    HOST: ${CI_PROJECT_URL}
    UPDATE_BRANCH: ci-bot/dependency-updates
    PRIVATE_TOKEN: ${GITLAB_API_TOKEN}
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_BOT_KEY" | tr -d '\r' | ssh-add - > /dev/null

    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - ssh-keyscan "https://gitlab.com" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config --global user.email "bot@fluffy.chat"
    - git config --global user.name "Dependency Update Bot"
    - sudo apt-get update && sudo apt-get install -y curl
  script:
    - flutter pub get
    - flutter pub pub run dapackages:dapackages.dart ./pubspec.yaml
    - flutter pub get
    - git remote set-url --push origin git@gitlab.com:$CI_PROJECT_PATH
    - 'git diff --exit-code || (git checkout -B ${UPDATE_BRANCH} && git add . && git commit -m "chore: Update dependencies" && git push -f origin ${UPDATE_BRANCH} && ./scripts/open-mr.sh)'

.release:
  stage: release
  image: curlimages/curl:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
  before_script:
    - export RELEASE_VERSION=$(echo $CI_COMMIT_TAG | grep -oE "\d+\.\d+\.\d+")
    - export PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/fluffychat/${RELEASE_VERSION}"

upload-android:
  extends: .release
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/android/app-release.apk ${PACKAGE_REGISTRY_URL}/fluffychat.apk
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/android/app-release.aab ${PACKAGE_REGISTRY_URL}/fluffychat.aab

upload-web:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/web/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/fluffychat-web.tar.gz

upload-linux:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/linux/release/bundle/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/fluffychat-linux.tar.gz

upload-windows:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/windows/runner/Release/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/fluffychat-windows.tar.gz

release:
  extends: .release
  image: registry.gitlab.com/gitlab-org/release-cli:latest

  script:
    - |
      release-cli create --name "Release ${CI_COMMIT_TAG}" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"fluffychat.apk\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat.apk\"}" \
        --assets-link "{\"name\":\"fluffychat.aab\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat.aab\"}" \
        --assets-link "{\"name\":\"fluffychat-linux.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-linux.tar.gz\"}" \
        --assets-link "{\"name\":\"fluffychat-windows.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-windows.tar.gz\"}" \
        --assets-link "{\"name\":\"fluffychat-web.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-web.tar.gz\"}"