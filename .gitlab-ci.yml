variables:
  FLUTTER_VERSION: 3.0.5

image: cirrusci/flutter:${FLUTTER_VERSION}

.shared_windows_runners:
  tags:
    - shared-windows
    - windows
    - windows-1809

stages:
  - test
  - build
  - deploy

code_analyze:
  stage: test
  script: [./scripts/code_analyze.sh]
  artifacts:
    reports:
      codequality: code-quality-report.json

widget_test:
  stage: test
  script: [flutter test]

# the basic integration test configuration testing FLOSS builds on Synapse
integration_test:
  image: registry.gitlab.com/famedly/company/frontend/flutter-dockerimages/integration/stable:${FLUTTER_VERSION}
  stage: test
  services:
    - name: docker:dind
      alias: docker
  variables:
    # activate container-to-container networking
    FF_NETWORK_PER_BUILD: "true"
    # Tell docker CLI how to talk to Docker daemon.
    DOCKER_HOST: tcp://docker:2375/
    # Use the overlayfs driver for improved performance.
    DOCKER_DRIVER: overlay2
    # Disable TLS since we're running inside local network.
    DOCKER_TLS_CERTDIR: ""
  before_script:
    # start AVD and keep running in background
    - scripts/integration-start-avd.sh &
    - scripts/integration-prepare-alpine.sh
    # create Synapse instance
    - scripts/integration-server-synapse.sh
    # properly set the homeserver IP and create test users
    - scripts/integration-prepare-homeserver.sh
    # ensure the homeserver works
    - curl docker:8008/_matrix/static/ 2> /dev/null | grep "It works! Synapse is running"
  script:
    - flutter pub get
    - flutter test integration_test
  allow_failure: true
  tags:
    - android
  timeout: 20m

# extending the default tests to test the Google-flavored builds
integration_test_google:
  extends: integration_test
  script:
    - git apply ./scripts/enable-android-google-services.patch
    - flutter pub get
    - flutter test integration_test
  allow_failure: true

# extending the default tests to use Conduit as local homeserver
integration_test_conduit:
  extends: integration_test
  before_script:
    # start AVD and keep running in background
    - scripts/integration-start-avd.sh &
    - scripts/integration-prepare-alpine.sh
    # create Conduit instance
    - scripts/integration-server-conduit.sh
    # properly set the homeserver IP and create test users
    - scripts/integration-prepare-homeserver.sh
    # ensure the homeserver works
    - curl docker:8008/_matrix/static/ 2> /dev/null | grep "M_NOT_FOUND" 1> /dev/null && echo "Conduit is running!"
  allow_failure: true

# extending the default tests to use Dendrite as local homeserver
integration_test_dendrite:
  extends: integration_test
  before_script:
    # start AVD and keep running in background
    - scripts/integration-start-avd.sh &
    - scripts/integration-prepare-alpine.sh
    # create Dendrite instance
    - scripts/integration-server-dendrite.sh
    # properly set the homeserver IP and create test users
    - scripts/integration-prepare-homeserver.sh
    # ensure the homeserver works
    - curl docker:8008/_matrix/static/ 2> /dev/null | grep "404 page not found" 1> /dev/null && echo "Dendrite is running!"
  allow_failure: true

release_mode_launches:
  image: registry.gitlab.com/famedly/company/frontend/flutter-dockerimages/integration/stable:${FLUTTER_VERSION}
  stage: test
  script:
    # start AVD and keep running in background
    - scripts/integration-start-avd.sh &
    # generate temporary release build configuration and ensure app launches
    - scripts/integration-check-release-build.sh
  allow_failure: true
  tags:
    - android
  timeout: 20m

release_mode_launches_google:
  extends: release_mode_launches
  before_script:
    - git apply ./scripts/enable-android-google-services.patch
  allow_failure: true

build_web:
  stage: build
  before_script:
    [sudo apt update && sudo apt install curl -y, ./scripts/prepare-web.sh]
  script: [./scripts/build-web.sh]
  artifacts:
    paths:
      - build/web/

build_windows:
  extends:
    - .shared_windows_runners
  stage: build
  before_script: [./scripts/prepare-windows.ps1]
  script: [./scripts/build-windows.ps1]
  artifacts:
    paths:
      - build/windows/runner/Release
  allow_failure: true
  only:
    - main
    - tags

build_android_debug:
  stage: build
  script: [./scripts/build-android-debug.sh]
  tags:
    - android
  artifacts:
    when: on_success
    paths:
      - build/app/outputs/apk/debug/app-debug.apk
  except:
    - main
    - tags

build_android_apk:
  stage: build
  before_script:
    - git apply ./scripts/enable-android-google-services.patch
    - ./scripts/prepare-android-release.sh
  script: [./scripts/build-android-apk.sh]
  tags:
    - android
  artifacts:
    when: on_success
    paths:
      - build/android/app-release.apk
  only:
    - main
    - tags

deploy_playstore_internal:
  stage: deploy
  before_script:
    - git apply ./scripts/enable-android-google-services.patch
    - ./scripts/prepare-android-release.sh
  script: [./scripts/release-playstore-beta.sh]
  tags:
    - android
  artifacts:
    when: on_success
    paths:
      - build/android/app-release.aab
  resource_group: playstore_release
  only:
    - main

fdroid_repo:
  image: debian:testing
  stage: deploy
  before_script:
    - apt-get update && apt-get -qy install fdroidserver wget curl jq --no-install-recommends || true
    - ./scripts/prepare-fdroid.sh || true
  script:
    - ./scripts/create_fdroid_repos.sh || true
  artifacts:
    when: always
    paths:
      - repo
  needs:
    - "build_android_apk"
  resource_group: playstore_release
  allow_failure: true
  only:
    - main

pages:
  needs:
    - "build_web"
    - "fdroid_repo"
  stage: deploy
  image: node:alpine
  before_script:
    - apk update
    - apk add jq unzip curl wget
  script:
    - cd docs
    - npx tailwindcss -o ./tailwind.css --minify
    - cd ..
    - mv docs public
    - mv repo public
    - mv build/web/ public/nightly
    - rm -rf build
    - ./scripts/download-web-stable.sh 
    - mv stable public/web
  artifacts:
    paths:
      - public
  only:
    - main

build_linux_x86:
  stage: build
  before_script:
    [
      sudo apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install keyboard-configuration -y && sudo apt-get install curl clang cmake ninja-build pkg-config libgtk-3-dev libblkid-dev liblzma-dev libjsoncpp-dev cmake-data libsecret-1-dev libsecret-1-0 librhash0 -y,
    ]
  script: [./scripts/build-linux.sh]
  artifacts:
    when: on_success
    paths:
      - build/linux/x64/release/bundle/

build_linux_arm64:
  stage: build
  before_script: [flutter upgrade]
  script: [./scripts/build-linux.sh]
  tags: [docker_arm64]
  only:
    - main
    - tags
  allow_failure: true
  artifacts:
    when: on_success
    paths:
      - build/linux/arm64/release/bundle/

update_dependencies:
  stage: build
  needs: []
  tags:
    - docker
  only:
    - schedules
  variables:
    HOST: ${CI_PROJECT_URL}
    UPDATE_BRANCH: ci-bot/dependency-updates
    PRIVATE_TOKEN: ${GITLAB_API_TOKEN}
  before_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_BOT_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "bot@fluffy.chat"
    - git config --global user.name "Dependency Update Bot"
    - sudo apt-get update && sudo apt-get install -y curl
  script:
    - ./scripts/update-dependencies.sh
    - git remote set-url --push origin git@gitlab.com:$CI_PROJECT_PATH
    - 'git diff --exit-code || (git checkout -B ${UPDATE_BRANCH} && git add . && git commit -m "chore: Update dependencies" && git push -f origin ${UPDATE_BRANCH} && ./scripts/open-mr.sh)'

.release:
  stage: deploy
  image: curlimages/curl:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
    - if: '$CI_COMMIT_TAG =~ /^rc\d+\.\d+\.\d+-\d+$/'
  before_script:
    - export RELEASE_TYPE=$(echo $CI_COMMIT_TAG | grep -oE "[a-z]+")
    - export RELEASE_VERSION=$(echo $CI_COMMIT_TAG | grep -oE "\d+\.\d+\.\d+")
    - export PACKAGE_REGISTRY_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/fluffychat/${RELEASE_VERSION}"

upload_android:
  extends: .release
  script:
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file build/android/app-release.apk ${PACKAGE_REGISTRY_URL}/fluffychat.apk

upload_web:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/web/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/fluffychat-web.tar.gz

upload_linux_x86:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/linux/x64/release/bundle/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/fluffychat-linux-x86.tar.gz

upload_linux_arm64:
  extends: .release
  script:
    - tar czf package.tar.gz -C build/linux/arm64/release/bundle/ .
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.tar.gz ${PACKAGE_REGISTRY_URL}/fluffychat-linux-arm64.tar.gz

upload_windows:
  extends: .release
  image: alpine:latest
  script:
    - apk add --no-cache curl zip
    - mv build/windows/runner/Release/fluffychat.msix fluffychat.msix
    - cd build/windows/runner/Release; zip -r ../../../../package.zip  . ; cd -
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file package.zip ${PACKAGE_REGISTRY_URL}/fluffychat-windows.zip
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file fluffychat.msix ${PACKAGE_REGISTRY_URL}/fluffychat-windows.msix

deploy_playstore:
  stage: deploy
  before_script:
    - git apply ./scripts/enable-android-google-services.patch
    - ./scripts/prepare-android-release.sh
  script: [./scripts/release-playstore.sh]
  resource_group: playstore_release
  only:
    - tags

release:
  extends: .release
  image: registry.gitlab.com/gitlab-org/release-cli:latest

  script:
    - |
      release-cli create --name "Release ${CI_COMMIT_TAG}" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"fluffychat.apk\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat.apk\"}" \
        --assets-link "{\"name\":\"fluffychat-linux-x86.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-linux-x86.tar.gz\"}" \
        --assets-link "{\"name\":\"fluffychat-linux-arm64.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-linux-arm64.tar.gz\"}" \
        --assets-link "{\"name\":\"fluffychat-windows.zip\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-windows.zip\"}" \
        --assets-link "{\"name\":\"fluffychat-windows.msix\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-windows.msix\"}" \
        --assets-link "{\"name\":\"fluffychat-web.tar.gz\",\"url\":\"${PACKAGE_REGISTRY_URL}/fluffychat-web.tar.gz\"}"
